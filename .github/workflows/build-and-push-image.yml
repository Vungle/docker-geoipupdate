name: Build and Push Images
run-name: ${{inputs.image_tag}} - ${{inputs.git_ref}} - ${{github.actor}}

on:
  push:
    branches:
      - wip-PBJ-9001-confirm-get-object-CI
  workflow_dispatch:
    inputs:
      image_tag:
        description: Tag for both amd64 and multi-arch. For example, 2.8.7, 2.8.7-beta.
        type: string
        required: true
        default: latest
      git_ref:
        description: The commit/branch/tag we build for. Keep empty to use default branch.
        type: string
      extra_tags:
        description: Extra tags to push, comma-separated. For example, latest, beta.
        type: string
        default: ''

permissions:
  id-token: write
  contents: write
  # https://stackoverflow.com/questions/72248956/github-action-with-docker-makes-error-exporting-to-image-403-forbidden-error
  packages: write
  pull-requests: read

env:
  HELM_EXPERIMENTAL_OCI: 1
  REGISTRY: ghcr.io  # For GitHub Container Registry
  REPOSITORY: geoipupdate  # Image repository name in the registry
jobs:
  build-and-push:
    name: Build and Publish Multi-Arch Images
    runs-on: ubuntu-latest
    steps:
      - name: Check out Repository Code
        uses: actions/checkout@v4  # https://github.com/actions/checkout
        with:
          ref: ${{inputs.git_ref}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set extra tags
        id: set-extra-tags
        if: inputs.extra_tags != ''
        run: |
          EXTRA_TAGS=""
          IFS=',' read -ra TAG_ARR <<< "${{ inputs.extra_tags }}"
          for tag in "${TAG_ARR[@]}"; do
            if [[ -n "$TAGS" ]]; then
              TAGS="$TAGS,"
            fi
            TAGS="${TAGS} ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.REPOSITORY }}:$tag"
          done
          echo "EXTRA_TAGS=,$TAGS" >> $GITHUB_OUTPUT
      - name: Get current timestamp in RFC3339
        id: meta
        run: echo "created=$(date --rfc-3339=seconds)" >> $GITHUB_OUTPUT
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./Dockerfile
          verbose: true
          failure-threshold: ignore
          no-fail: true
          output-file: /tmp/hadolint-report.txt
      - name: Lint Dockerfile and write to summary
        run: |
          echo '### 🧼 Hadolint Results' >> $GITHUB_STEP_SUMMARY
          if [[ -s /tmp/hadolint-report.txt ]]; then
            cat /tmp/hadolint-report.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No issues found." >> $GITHUB_STEP_SUMMARY
          fi
        shell: bash
      - name: Build and publish images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.REPOSITORY }}:${{inputs.image_tag}}${{ steps.set-extra-tags.outputs.EXTRA_TAGS }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=${{env.REPOSITORY}}
            org.opencontainers.image.version=${{inputs.image_tag}}
            org.opencontainers.image.vendor=Liftoff
            org.opencontainers.image.description=GeoIP update client for DMX
            org.opencontainers.image.authors=${{ github.actor }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
      - name: Append image summary
        run: |
          echo "- 🐳 Image for \`${{env.REPOSITORY}}\` published with tag \`${{ inputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "  - GHCR: \`${{env.REGISTRY}}/${{github.repository_owner}}/${{ env.REPOSITORY }}:${{ inputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
      - name: Verify Image Push
        run: |
          IFS=',' read -ra TAG_ARR <<< "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.REPOSITORY }}:${{inputs.image_tag}}${{ steps.set-extra-tags.outputs.EXTRA_TAGS }}"
          for tag in "${TAG_ARR[@]}"; do
            echo "Verifying image: $tag"
            docker manifest inspect $tag || echo "Image verification failed"
          done